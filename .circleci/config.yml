# This CircleCI configuration uses workflows to fan-out to multiple jobs.  The
# workflow is Dockerized. The first job builds the Docker image which is used
# in all future steps.
#
#  Assumes that the Docker image is published to Docker Hub.
version: 2

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
defaults: &defaults
  environment:
    - DOCKER_REPOSITORY: "reactioncommerce/reaction-docs-static"
    - DOCKER_NAMESPACE: "reactioncommerce"
    - DOCKER_NAME: "reaction-docs-static"

  docker:
    - image: circleci/node:8-stretch

jobs:
  docker-build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Build
          command: |
            docker build \
              --build-arg "BUILD_COMPARE_URL=$CIRCLE_COMPARE_URL" \
              --build-arg "BUILD_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" \
              --build-arg "BUILD_ENV=test" \
              --build-arg "BUILD_NUMBER=$CIRCLE_BUILD_NUM" \
              --build-arg "BUILD_PLATFORM=circleci" \
              --build-arg "BUILD_PLATFORM_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME" \
              --build-arg "BUILD_PLATFORM_PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME" \
              --build-arg "BUILD_PULL_REQUESTS=$CI_PULL_REQUESTS" \
              --build-arg "BUILD_TRIGGERED_BY_TAG=$CIRCLE_TAG" \
              --build-arg "BUILD_URL=$CIRCLE_BUILD_URL" \
              --build-arg "CIRCLE_WORKFLOW_ID=$CIRCLE_WORKFLOW_ID" \
              --build-arg "CIRCLE_WORKFLOW_JOB_ID=$CIRCLE_WORKFLOW_JOB_ID" \
              --build-arg "CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS=$CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS" \
              --build-arg "CIRCLE_WORKSPACE_ID=$CIRCLE_WORKSPACE_ID" \
              --build-arg "GIT_REPOSITORY_URL=$CIRCLE_REPOSITORY_URL" \
              --build-arg "GIT_SHA1=$CIRCLE_SHA1" \
              --build-arg "LICENSE=GPL-3.0-only" \
              --build-arg "VCS_REF=$CIRCLE_SHA1" \
              --build-arg "VENDOR=Reaction Commerce" \
              -t "$DOCKER_REPOSITORY:$CIRCLE_SHA1" .
            mkdir -p docker-cache
            docker save \
              -o docker-cache/docker-image.tar \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
      - run:
          name: Save Test .env for Workspace Jobs
          command: cp .env.example docker-cache/.env
      - persist_to_workspace:
          root: docker-cache
          paths:
            - docker-image.tar
            - .env

  lint:
    <<: *defaults
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Lint
          command: |
            docker run \
              --env-file docker-cache/.env \
              --name reactionapp_web_1 \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
              yarn run lint

  dockerfile-lint:
    <<: *defaults
    docker:
      - image: hadolint/hadolint:v1.6.6-6-g254b4ff
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Dockerfile Lint
          command: |
            hadolint Dockerfile

  test:
    <<: *defaults
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Test
          command: |
            docker run \
              --env-file docker-cache/.env \
              --name reactionapp_web_1 \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
              yarn run test

  snyk-security:
    <<: *defaults
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Snyk
          command: |
            # Snyk doesn't look up the directory tree for node_modules as
            # NodeJS does so we have to take some extra measures to test in the
            # Docker image. Copy package.json up a directory so that it is a
            # sibling to node_modules, then run snyk test.
            docker run \
              --env-file docker-cache/.env \
              -e "SNYK_TOKEN=$SNYK_TOKEN" \
              --name reactionapp_web_1 \
              -w /usr/local/src \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
              sh -c "cp reaction-app/package.json ./ && snyk test"

  deploy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Install Netlify CLI
          command: |
            wget -O netlify.tar.gz \
              https://github.com/netlify/netlifyctl/releases/download/v0.4.0/netlifyctl-linux-amd64-0.4.0.tar.gz && \
              tar -xzf netlify.tar.gz
      - run:
          name: Copy built files
          command: docker create "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
            | xargs -t -I % docker cp %:/usr/local/src/reaction-app/website .
      - run:
          name: Copy redirect file to deploy folder
          command: cp _redirects website/build/reaction
      - run:
          name: "Deploy to Netlify"
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              SITE_ID=$PRODUCTION_SITE_ID
            else
              SITE_ID=$STAGING_SITE_ID
            fi

            ./netlifyctl deploy \
              --publish-directory website/build/reaction \
              --site-id $SITE_ID \
              --access-token $NETLIFY_ACCESS_TOKEN

workflows:
  version: 2
  build_and_test:
    jobs:
      - dockerfile-lint
      - docker-build:
          context: reaction-build-read
      - lint:
          context: reaction-validation
          requires:
            - docker-build
      - test:
          context: reaction-validation
          requires:
            - docker-build
      - snyk-security:
          context: reaction-validation
          requires:
            - docker-build
      - deploy:
          requires:
            - docker-build
            - dockerfile-lint
            - lint
            - test
          filters:
            branches:
              only:
                - /^staging$/
                - /^master$/
